name: Build, Publish, & Create Release

on:
  push:
    branches:
      - main

permissions:
  contents: write # Allow creating releases and uploading asset
  
jobs:
  publish:
    runs-on: windows-latest # Use Windows runner for WPF projects
    strategy:
      matrix:
        dotnet-version: [8.0.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}


      # Cache NuGet packages (optional but speeds up builds)
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-


      - name: dotnet restore
        run: dotnet restore ./PomodoroTrayApp.sln


      # Run tests (if any)
      # - name: dotnet test
      #   run: dotnet test ./YourSolution.sln --no-restore --verbosity normal


      # Extract Version from .csproj - this step reads the <Version> tag from the project file.
      - name: Extract Project Version
        id: get_version
        run: |
          $csprojPath = "PomodoroTrayApp.csproj"
          Write-Host "Looking for version in: $csprojPath"
          $xml = [xml](Get-Content $csprojPath)
          $version = $xml.Project.PropertyGroup.Version
          if (-not $version) {
            Write-Error "Could not find <Version> or <VersionPrefix> tag in $csprojPath"
            exit 1
          }
          Write-Host "Found version: $version"
          # Set output variable for use in later steps
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh


      - name: dotnet publish (Release)
        run: |
          dotnet publish PomodoroTrayApp.csproj `
            -c Release `
            -r win-x64 `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -p:DebugType=None `
            -p:Version=${{ steps.get_version.outputs.version }} `
            -o publish
        shell: pwsh # Use PowerShell for multi-line run command on Windows


      # Create GitHub Release and Upload Assets
      # This step runs only if the previous steps were successful.
      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          prerelease: false
          draft: false
          files: ./publish/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
